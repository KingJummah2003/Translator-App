buildscript {
    ext {
        buildToolsVersion = '35.0.0'
        minSdkVersion = 24
        compileSdkVersion = 35
        targetSdkVersion = 35  // ✅ Match compileSdkVersion
        kotlinVersion = '1.9.20' // ✅ Upgrade to latest stable Kotlin
        ndkVersion = "26.1.10909125"
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url file("$rootDir/../node_modules/react-native/android") } // ✅ Fix repository path
        maven { url file("$rootDir/../node_modules/@react-native/gradle-plugin") } // ✅ Ensure plugin resolution
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.0.2") // ✅ Ensure compatible AGP version
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20") // ✅ Ensure Kotlin compatibility
        classpath("com.facebook.react:react-native-gradle-plugin:0.76.7") // ✅ Ensure React Native Gradle Plugin is included
    }
}

// ✅ Ensure Correct Plugin Application
apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        maven { url file("$rootDir/../node_modules/react-native/android") }
        maven { url file("$rootDir/../node_modules/jsc-android/dist") }
    }
}

// ✅ Fix Dependency Resolution
dependencyResolutionManagement {
    versionCatalogs {
        reactAndroidLibs {
            from(files("$rootDir/../gradle/libs.versions.toml"))
        }
    }
}

// ✅ Apply Expo Modules & Autolinking
apply from: file("$rootDir/../scripts/autolinking.gradle")
useExpoModules()

rootProject.name = 'TranslatorApp'
include ':app'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.translator.app'
    defaultConfig {
        applicationId 'com.translator.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "1.0.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled (findProperty('android.enableProguardInReleaseBuilds')?.toBoolean() ?: false)
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }

    // ✅ Move the React Native Configuration inside the android block
    react {
        entryFile = "index.js"
        reactNativeDir = file("$rootDir/../node_modules/react-native/android")
        hermesCommand = file("$rootDir/../node_modules/react-native/sdks/hermesc/${osName}/hermesc") // ✅ Fix Hermes path
        codegenDir = file("$rootDir/../node_modules/@react-native/codegen")

        cliFile = file("$rootDir/../node_modules/@expo/cli")
        bundleCommand = "export:embed"

        autolinkLibrariesWithApp()
    }
}

// ✅ Dependencies
dependencies {
    implementation "com.facebook.react:react-android"

    if (findProperty('expo.gif.enabled') == "true") {
        implementation "com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}"
    }
    if (findProperty('expo.webp.enabled') == "true") {
        implementation "com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}"

        if (findProperty('expo.webp.animated') == "true") {
            implementation "com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}"
        }
    }

    if (findProperty('hermesEnabled')?.toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation 'org.webkit:android-jsc:+'
    }

    project.ext.react = [
        enableHermes: true
    ]
}
