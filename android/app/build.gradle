apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'


def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = "index.js"
    reactNativeDir = file("$rootDir/../node_modules/react-native/android")
    hermesCommand = file("$rootDir/../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc")
    codegenDir = file("$rootDir/../node_modules/@react-native/codegen")

    cliFile = file("$rootDir/../node_modules/@expo/cli")
    bundleCommand = "export:embed"

    autolinkLibrariesWithApp()
}

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.translator.app'
    defaultConfig {
        applicationId 'com.translator.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled (findProperty('android.enableProguardInReleaseBuilds')?.toBoolean() ?: false)
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

dependencies {
    implementation "com.facebook.react:react-android"

    if (findProperty('expo.gif.enabled') == "true") {
        implementation "com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}"
    }
    if (findProperty('expo.webp.enabled') == "true") {
        implementation "com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}"
        if (findProperty('expo.webp.animated') == "true") {
            implementation "com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}"
        }
    }

    if (findProperty('hermesEnabled')?.toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation 'org.webkit:android-jsc:+'
    }

    project.ext.react = [
    enableHermes: true
]

}
